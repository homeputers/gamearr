// Prisma schema for storage module
// This schema uses PostgreSQL database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Platform {
  id              String     @id @default(cuid())
  name            String     @unique
  aliases         String[]
  extensions      String[]
  libraries       Library[]
  datEntries      DatEntry[]
  datFiles        DatFile[]  @relation("PlatformDatFiles")
  nointroDatUrl   String?    @map("nointro_dat_url")
  activeDatFileId String?    @unique
  activeDatFile   DatFile?   @relation("PlatformActiveDatFile", fields: [activeDatFileId], references: [id])
}

model Library {
  id         String     @id @default(cuid())
  path       String     @unique
  platformId String
  platform   Platform   @relation(fields: [platformId], references: [id])
  artifacts  Artifact[]
  autoOrganizeOnImport Boolean  @default(true)
  lastScannedAt        DateTime?
}

model Artifact {
  id             String   @id @default(cuid())
  libraryId      String
  library        Library  @relation(fields: [libraryId], references: [id])
  path           String
  size           Int
  crc32          String?
  sha1           String?
  format         String?
  multiPartGroup String?  @map("multi_part_group")
  releaseId      String?
  release        Release? @relation(fields: [releaseId], references: [id])
  preferred      Boolean  @default(false)

  @@unique([libraryId, path])
}

model Game {
  id         String    @id @default(cuid())
  title      String
  provider   String
  providerId String
  releases   Release[]

  @@unique([provider, providerId])
}

model Release {
  id        String     @id @default(cuid())
  gameId    String
  game      Game       @relation(fields: [gameId], references: [id])
  region    String?
  language  String?
  artifacts Artifact[]
}

model DatFile {
  id             String    @id @default(cuid())
  platform       Platform  @relation("PlatformDatFiles", fields: [platformId], references: [id])
  platformId     String
  filename       String
  path           String    @unique
  size           BigInt
  sha256         String
  source         String? // "upload"|"remote"
  version        String?
  uploadedAt     DateTime  @default(now())
  activatedAt    DateTime?
  activePlatform Platform? @relation("PlatformActiveDatFile")
  entries        DatEntry[]
}

model DatEntry {
  id            String    @id @default(cuid())
  platformId    String
  datFileId     String   @map("dat_file_id")
  canonicalName String   @map("canonical_name")
  hashCrc       String?  @map("hash_crc")
  hashSha1      String?  @map("hash_sha1")
  hashMd5       String?  @map("hash_md5")
  region        String?
  languages     String[]
  serial        String?
  revision      String?
  verified      Boolean  @default(true)
  source        String   @default("unknown")
  platform      Platform @relation(fields: [platformId], references: [id])
  datFile       DatFile  @relation(fields: [datFileId], references: [id])

  @@index([hashCrc])
  @@index([hashSha1])
  @@index([hashMd5])
  @@unique([datFileId, canonicalName])
}

model Download {
  id        String   @id @default(cuid())
  state     String
  client    String
  payload   Json
  createdAt DateTime @default(now()) @map("created_at")
  doneAt    DateTime? @map("done_at")
}
